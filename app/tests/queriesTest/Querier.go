// Code generated by mockery v2.53.4. DO NOT EDIT.

package queriesTest

import (
	context "context"
	goqueries "ecomm-go/db/goqueries"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// AddProductCategoryByIDs provides a mock function with given fields: ctx, arg
func (_m *Querier) AddProductCategoryByIDs(ctx context.Context, arg goqueries.AddProductCategoryByIDsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddProductCategoryByIDs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.AddProductCategoryByIDsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountConvByUserConv provides a mock function with given fields: ctx, arg
func (_m *Querier) CountConvByUserConv(ctx context.Context, arg goqueries.CountConvByUserConvParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountConvByUserConv")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.CountConvByUserConvParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.CountConvByUserConvParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.CountConvByUserConvParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategoryByID provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteCategoryByID(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategoryByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItemsFromBasket provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteItemsFromBasket(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemsFromBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductByID provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteProductByID(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductCategoryByIDs provides a mock function with given fields: ctx, arg
func (_m *Querier) DeleteProductCategoryByIDs(ctx context.Context, arg goqueries.DeleteProductCategoryByIDsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductCategoryByIDs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.DeleteProductCategoryByIDsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSpecialByID provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteSpecialByID(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpecialByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVariantByID provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteVariantByID(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVariantByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBasketItemsByUserEmail provides a mock function with given fields: ctx, email
func (_m *Querier) GetBasketItemsByUserEmail(ctx context.Context, email string) ([]goqueries.GetBasketItemsByUserEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetBasketItemsByUserEmail")
	}

	var r0 []goqueries.GetBasketItemsByUserEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]goqueries.GetBasketItemsByUserEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []goqueries.GetBasketItemsByUserEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetBasketItemsByUserEmailRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasketItemsByUserId provides a mock function with given fields: ctx, userID
func (_m *Querier) GetBasketItemsByUserId(ctx context.Context, userID int32) ([]goqueries.GetBasketItemsByUserIdRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBasketItemsByUserId")
	}

	var r0 []goqueries.GetBasketItemsByUserIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.GetBasketItemsByUserIdRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.GetBasketItemsByUserIdRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetBasketItemsByUserIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields: ctx
func (_m *Querier) GetCategories(ctx context.Context) ([]goqueries.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategories")
	}

	var r0 []goqueries.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesByProductID provides a mock function with given fields: ctx, productID
func (_m *Querier) GetCategoriesByProductID(ctx context.Context, productID int32) ([]goqueries.Category, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoriesByProductID")
	}

	var r0 []goqueries.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.Category, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.Category); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesFilteredProductID provides a mock function with given fields: ctx, productID
func (_m *Querier) GetCategoriesFilteredProductID(ctx context.Context, productID int32) ([]goqueries.GetCategoriesFilteredProductIDRow, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoriesFilteredProductID")
	}

	var r0 []goqueries.GetCategoriesFilteredProductIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.GetCategoriesFilteredProductIDRow, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.GetCategoriesFilteredProductIDRow); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetCategoriesFilteredProductIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetCategoryByID(ctx context.Context, id int32) (goqueries.Category, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoryByID")
	}

	var r0 goqueries.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (goqueries.Category, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) goqueries.Category); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(goqueries.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConversations provides a mock function with given fields: ctx
func (_m *Querier) GetConversations(ctx context.Context) ([]goqueries.Conversation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConversations")
	}

	var r0 []goqueries.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.Conversation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.Conversation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConversationsByUserId provides a mock function with given fields: ctx, email
func (_m *Querier) GetConversationsByUserId(ctx context.Context, email string) ([]goqueries.Conversation, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetConversationsByUserId")
	}

	var r0 []goqueries.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]goqueries.Conversation, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []goqueries.Conversation); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavouriteByProductId provides a mock function with given fields: ctx, arg
func (_m *Querier) GetFavouriteByProductId(ctx context.Context, arg goqueries.GetFavouriteByProductIdParams) ([]goqueries.FavouriteItem, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetFavouriteByProductId")
	}

	var r0 []goqueries.FavouriteItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetFavouriteByProductIdParams) ([]goqueries.FavouriteItem, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetFavouriteByProductIdParams) []goqueries.FavouriteItem); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.FavouriteItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.GetFavouriteByProductIdParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavouritesById provides a mock function with given fields: ctx, email
func (_m *Querier) GetFavouritesById(ctx context.Context, email string) ([]goqueries.GetFavouritesByIdRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetFavouritesById")
	}

	var r0 []goqueries.GetFavouritesByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]goqueries.GetFavouritesByIdRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []goqueries.GetFavouritesByIdRow); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetFavouritesByIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestShippingByUserId provides a mock function with given fields: ctx, email
func (_m *Querier) GetLatestShippingByUserId(ctx context.Context, email string) (goqueries.Shipping, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestShippingByUserId")
	}

	var r0 goqueries.Shipping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (goqueries.Shipping, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) goqueries.Shipping); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(goqueries.Shipping)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: ctx
func (_m *Querier) GetMessages(ctx context.Context) ([]goqueries.GetMessagesRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []goqueries.GetMessagesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.GetMessagesRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.GetMessagesRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetMessagesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByConversationId provides a mock function with given fields: ctx, id
func (_m *Querier) GetMessagesByConversationId(ctx context.Context, id int32) ([]goqueries.GetMessagesByConversationIdRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByConversationId")
	}

	var r0 []goqueries.GetMessagesByConversationIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.GetMessagesByConversationIdRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.GetMessagesByConversationIdRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetMessagesByConversationIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenConversationById provides a mock function with given fields: ctx, arg
func (_m *Querier) GetOpenConversationById(ctx context.Context, arg goqueries.GetOpenConversationByIdParams) ([]goqueries.GetOpenConversationByIdRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenConversationById")
	}

	var r0 []goqueries.GetOpenConversationByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetOpenConversationByIdParams) ([]goqueries.GetOpenConversationByIdRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetOpenConversationByIdParams) []goqueries.GetOpenConversationByIdRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetOpenConversationByIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.GetOpenConversationByIdParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetOrderByID(ctx context.Context, id int32) (goqueries.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 goqueries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (goqueries.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) goqueries.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(goqueries.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItemsByOrderID provides a mock function with given fields: ctx, id
func (_m *Querier) GetOrderItemsByOrderID(ctx context.Context, id int32) ([]goqueries.GetOrderItemsByOrderIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItemsByOrderID")
	}

	var r0 []goqueries.GetOrderItemsByOrderIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.GetOrderItemsByOrderIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.GetOrderItemsByOrderIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetOrderItemsByOrderIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItemsByUserId provides a mock function with given fields: ctx, userID
func (_m *Querier) GetOrderItemsByUserId(ctx context.Context, userID int32) ([]goqueries.GetOrderItemsByUserIdRow, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItemsByUserId")
	}

	var r0 []goqueries.GetOrderItemsByUserIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.GetOrderItemsByUserIdRow, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.GetOrderItemsByUserIdRow); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetOrderItemsByUserIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByUserId provides a mock function with given fields: ctx, userID
func (_m *Querier) GetOrdersByUserId(ctx context.Context, userID int32) ([]goqueries.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByUserId")
	}

	var r0 []goqueries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersFillUser provides a mock function with given fields: ctx
func (_m *Querier) GetOrdersFillUser(ctx context.Context) ([]goqueries.GetOrdersFillUserRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersFillUser")
	}

	var r0 []goqueries.GetOrdersFillUserRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.GetOrdersFillUserRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.GetOrdersFillUserRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetOrdersFillUserRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersFillUserByStatus provides a mock function with given fields: ctx, status
func (_m *Querier) GetOrdersFillUserByStatus(ctx context.Context, status string) ([]goqueries.GetOrdersFillUserByStatusRow, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersFillUserByStatus")
	}

	var r0 []goqueries.GetOrdersFillUserByStatusRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]goqueries.GetOrdersFillUserByStatusRow, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []goqueries.GetOrdersFillUserByStatusRow); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetOrdersFillUserByStatusRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersFillUserConvByStatus provides a mock function with given fields: ctx, status
func (_m *Querier) GetOrdersFillUserConvByStatus(ctx context.Context, status string) ([]goqueries.GetOrdersFillUserConvByStatusRow, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersFillUserConvByStatus")
	}

	var r0 []goqueries.GetOrdersFillUserConvByStatusRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]goqueries.GetOrdersFillUserConvByStatusRow, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []goqueries.GetOrdersFillUserConvByStatusRow); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetOrdersFillUserConvByStatusRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: ctx, id
func (_m *Querier) GetProductById(ctx context.Context, id int32) (goqueries.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 goqueries.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (goqueries.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) goqueries.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(goqueries.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductVariantsByProductId provides a mock function with given fields: ctx, id
func (_m *Querier) GetProductVariantsByProductId(ctx context.Context, id int32) ([]goqueries.ProductVariant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductVariantsByProductId")
	}

	var r0 []goqueries.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.ProductVariant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.ProductVariant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx
func (_m *Querier) GetProducts(ctx context.Context) ([]goqueries.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []goqueries.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByCategoriesAndName provides a mock function with given fields: ctx, arg
func (_m *Querier) GetProductsByCategoriesAndName(ctx context.Context, arg goqueries.GetProductsByCategoriesAndNameParams) ([]goqueries.GetProductsByCategoriesAndNameRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByCategoriesAndName")
	}

	var r0 []goqueries.GetProductsByCategoriesAndNameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetProductsByCategoriesAndNameParams) ([]goqueries.GetProductsByCategoriesAndNameRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetProductsByCategoriesAndNameParams) []goqueries.GetProductsByCategoriesAndNameRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetProductsByCategoriesAndNameRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.GetProductsByCategoriesAndNameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByCategoryId provides a mock function with given fields: ctx, categoryID
func (_m *Querier) GetProductsByCategoryId(ctx context.Context, categoryID int32) ([]goqueries.Product, error) {
	ret := _m.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByCategoryId")
	}

	var r0 []goqueries.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.Product, error)); ok {
		return rf(ctx, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.Product); ok {
		r0 = rf(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewsFillUserByProductID provides a mock function with given fields: ctx, productID
func (_m *Querier) GetReviewsFillUserByProductID(ctx context.Context, productID int32) ([]goqueries.GetReviewsFillUserByProductIDRow, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewsFillUserByProductID")
	}

	var r0 []goqueries.GetReviewsFillUserByProductIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.GetReviewsFillUserByProductIDRow, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.GetReviewsFillUserByProductIDRow); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetReviewsFillUserByProductIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecial provides a mock function with given fields: ctx
func (_m *Querier) GetSpecial(ctx context.Context) ([]goqueries.Special, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSpecial")
	}

	var r0 []goqueries.Special
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.Special, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.Special); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.Special)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecialByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetSpecialByID(ctx context.Context, id int32) (goqueries.Special, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSpecialByID")
	}

	var r0 goqueries.Special
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (goqueries.Special, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) goqueries.Special); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(goqueries.Special)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *Querier) GetUsers(ctx context.Context) ([]goqueries.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []goqueries.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantById provides a mock function with given fields: ctx, id
func (_m *Querier) GetVariantById(ctx context.Context, id int32) (goqueries.ProductVariant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVariantById")
	}

	var r0 goqueries.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (goqueries.ProductVariant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) goqueries.ProductVariant); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(goqueries.ProductVariant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantByOptions provides a mock function with given fields: ctx, arg
func (_m *Querier) GetVariantByOptions(ctx context.Context, arg goqueries.GetVariantByOptionsParams) (goqueries.ProductVariant, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVariantByOptions")
	}

	var r0 goqueries.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetVariantByOptionsParams) (goqueries.ProductVariant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.GetVariantByOptionsParams) goqueries.ProductVariant); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.ProductVariant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.GetVariantByOptionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantsFilledProducts provides a mock function with given fields: ctx
func (_m *Querier) GetVariantsFilledProducts(ctx context.Context) ([]goqueries.GetVariantsFilledProductsRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVariantsFilledProducts")
	}

	var r0 []goqueries.GetVariantsFilledProductsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goqueries.GetVariantsFilledProductsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goqueries.GetVariantsFilledProductsRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.GetVariantsFilledProductsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBasketItem provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertBasketItem(ctx context.Context, arg goqueries.InsertBasketItemParams) (goqueries.BasketItem, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertBasketItem")
	}

	var r0 goqueries.BasketItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertBasketItemParams) (goqueries.BasketItem, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertBasketItemParams) goqueries.BasketItem); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.BasketItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertBasketItemParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCategory provides a mock function with given fields: ctx, name
func (_m *Querier) InsertCategory(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for InsertCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertConversation provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertConversation(ctx context.Context, arg goqueries.InsertConversationParams) (goqueries.Conversation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertConversation")
	}

	var r0 goqueries.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertConversationParams) (goqueries.Conversation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertConversationParams) goqueries.Conversation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.Conversation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertConversationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertConversationUser provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertConversationUser(ctx context.Context, arg goqueries.InsertConversationUserParams) (goqueries.ConversationsUser, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertConversationUser")
	}

	var r0 goqueries.ConversationsUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertConversationUserParams) (goqueries.ConversationsUser, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertConversationUserParams) goqueries.ConversationsUser); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.ConversationsUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertConversationUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertItemToFavourites provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertItemToFavourites(ctx context.Context, arg goqueries.InsertItemToFavouritesParams) (goqueries.FavouriteItem, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertItemToFavourites")
	}

	var r0 goqueries.FavouriteItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertItemToFavouritesParams) (goqueries.FavouriteItem, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertItemToFavouritesParams) goqueries.FavouriteItem); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.FavouriteItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertItemToFavouritesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMessage provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertMessage(ctx context.Context, arg goqueries.InsertMessageParams) (goqueries.ConversationMessage, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertMessage")
	}

	var r0 goqueries.ConversationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertMessageParams) (goqueries.ConversationMessage, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertMessageParams) goqueries.ConversationMessage); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.ConversationMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertMessageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertOrder(ctx context.Context, arg goqueries.InsertOrderParams) (goqueries.Order, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrder")
	}

	var r0 goqueries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertOrderParams) (goqueries.Order, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertOrderParams) goqueries.Order); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertOrderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrderItem provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertOrderItem(ctx context.Context, arg goqueries.InsertOrderItemParams) (goqueries.OrderItem, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderItem")
	}

	var r0 goqueries.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertOrderItemParams) (goqueries.OrderItem, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertOrderItemParams) goqueries.OrderItem); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.OrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertOrderItemParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertProduct(ctx context.Context, arg goqueries.InsertProductParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertProductParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertReview provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertReview(ctx context.Context, arg goqueries.InsertReviewParams) (goqueries.Review, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertReview")
	}

	var r0 goqueries.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertReviewParams) (goqueries.Review, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertReviewParams) goqueries.Review); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertReviewParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertShipping provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertShipping(ctx context.Context, arg goqueries.InsertShippingParams) (goqueries.Shipping, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertShipping")
	}

	var r0 goqueries.Shipping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertShippingParams) (goqueries.Shipping, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertShippingParams) goqueries.Shipping); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.Shipping)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.InsertShippingParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSpecial provides a mock function with given fields: ctx, name
func (_m *Querier) InsertSpecial(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for InsertSpecial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertVariant provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertVariant(ctx context.Context, arg goqueries.InsertVariantParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InsertVariant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.InsertVariantParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductVariantsByProductId provides a mock function with given fields: ctx, productID
func (_m *Querier) ProductVariantsByProductId(ctx context.Context, productID int32) ([]goqueries.ProductVariant, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for ProductVariantsByProductId")
	}

	var r0 []goqueries.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]goqueries.ProductVariant, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []goqueries.ProductVariant); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goqueries.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromBasket provides a mock function with given fields: ctx, id
func (_m *Querier) RemoveFromBasket(ctx context.Context, id int32) (goqueries.BasketItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromBasket")
	}

	var r0 goqueries.BasketItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (goqueries.BasketItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) goqueries.BasketItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(goqueries.BasketItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItemFromFavourites provides a mock function with given fields: ctx, arg
func (_m *Querier) RemoveItemFromFavourites(ctx context.Context, arg goqueries.RemoveItemFromFavouritesParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveItemFromFavourites")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.RemoveItemFromFavouritesParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCategory provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateCategory(ctx context.Context, arg goqueries.UpdateCategoryParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpdateCategoryParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateOrderStatus(ctx context.Context, arg goqueries.UpdateOrderStatusParams) (goqueries.Order, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 goqueries.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpdateOrderStatusParams) (goqueries.Order, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpdateOrderStatusParams) goqueries.Order); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.UpdateOrderStatusParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateProduct(ctx context.Context, arg goqueries.UpdateProductParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpdateProductParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSpecial provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateSpecial(ctx context.Context, arg goqueries.UpdateSpecialParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSpecial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpdateSpecialParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVariant provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateVariant(ctx context.Context, arg goqueries.UpdateVariantParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVariant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpdateVariantParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUser provides a mock function with given fields: ctx, arg
func (_m *Querier) UpsertUser(ctx context.Context, arg goqueries.UpsertUserParams) (goqueries.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 goqueries.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpsertUserParams) (goqueries.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goqueries.UpsertUserParams) goqueries.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(goqueries.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goqueries.UpsertUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTx provides a mock function with given fields: tx
func (_m *Querier) WithTx(tx *sql.Tx) *goqueries.Queries {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 *goqueries.Queries
	if rf, ok := ret.Get(0).(func(*sql.Tx) *goqueries.Queries); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqueries.Queries)
		}
	}

	return r0
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
